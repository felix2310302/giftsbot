"""
GiftsBot (MVP, autonomous, minimal work)
- polling aiogram bot
- sqlite storage (users, gifts, orders)
- simulated payments (TEST_MODE=True) OR CloudPayments check if CLOUDPAYMENTS_API_KEY set
- background watcher that confirms payments and delivers gifts
- admin commands to manage gifts and broadcast
"""

import os
import sqlite3
import asyncio
import logging
import time
import requests
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

# ========== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ env ==========
API_TOKEN = os.getenv("API_TOKEN")  # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
ADMINS = os.getenv("ADMINS", "")  # –ø—Ä–æ–ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Å–≤–æ–∏ chat_id (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12345678,87654321)
ADMINS = [int(x) for x in ADMINS.split(",") if x.strip().isdigit()]

TEST_MODE = os.getenv("TEST_MODE", "true").lower() in ("1", "true", "yes")
# CloudPayments (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) - –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ–ø–ª–∞—Ç—É, –≤—ã—Å—Ç–∞–≤—å —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
CLOUDPAYMENTS_API_KEY = os.getenv("CLOUDPAYMENTS_API_KEY")  # api-key (APP Key) –∏–∑ CloudPayments
# –ø—Ä–∏–º–µ—Ä: CLOUDPAYMENTS_API_KEY = "fcb6bd81970001eefda1cefd..."

DB_PATH = os.getenv("DB_PATH", "giftsbot.db")

if not API_TOKEN:
    raise RuntimeError("API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ========== SQLite helpers ==========
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    cur.execute("""
    CREATE TABLE IF NOT EXISTS users (
        chat_id INTEGER PRIMARY KEY,
        first_name TEXT,
        last_name TEXT,
        username TEXT,
        created_at TIMESTAMP
    )""")
    # –ø–æ–¥–∞—Ä–∫–∏
    cur.execute("""
    CREATE TABLE IF NOT EXISTS gifts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        price INTEGER,
        description TEXT,
        created_at TIMESTAMP
    )""")
    # –∑–∞–∫–∞–∑—ã
    cur.execute("""
    CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER,
        gift_id INTEGER,
        status TEXT,
        amount INTEGER,
        invoice_id TEXT,
        created_at TIMESTAMP,
        updated_at TIMESTAMP
    )""")
    conn.commit()
    conn.close()

def db_execute(query, params=(), fetch=False, one=False):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(query, params)
    if fetch:
        rows = cur.fetchall()
        conn.commit()
        conn.close()
        return rows
    if one:
        row = cur.fetchone()
        conn.commit()
        conn.close()
        return row
    conn.commit()
    conn.close()
    return None

# ========== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –¥–æ–±–∞–≤–∏–º –ø–∞—Ä—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤, –µ—Å–ª–∏ –ø—É—Å—Ç–æ ==========
def ensure_sample_gifts():
    rows = db_execute("SELECT id FROM gifts LIMIT 1", fetch=True)
    if not rows:
        db_execute("INSERT INTO gifts (name, price, description, created_at) VALUES (?, ?, ?, ?)",
                   ("NFT –ö–æ—Ç–∏–∫", 500, "–ú–∏–ª—ã–π NFT –∫–æ—Ç–∏–∫", datetime.utcnow()))
        db_execute("INSERT INTO gifts (name, price, description, created_at) VALUES (?, ?, ?, ?)",
                   ("NFT –ú–∞—à–∏–Ω–∞", 1200, "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω–∞—è –º–∞—à–∏–Ω–∞", datetime.utcnow()))
        log.info("–î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏")

# ========== –£—Ç–∏–ª–∏—Ç—ã ==========
def save_user(message: types.Message):
    db_execute("""
    INSERT OR REPLACE INTO users (chat_id, first_name, last_name, username, created_at)
    VALUES (?, ?, ?, ?, ?)
    """, (message.from_user.id, message.from_user.first_name, message.from_user.last_name or "",
          message.from_user.username or "", datetime.utcnow()))

def is_admin(user_id: int):
    return user_id in ADMINS

def create_order(chat_id: int, gift_id: int, amount: int):
    created = datetime.utcnow()
    invoice_id = f"order_{int(time.time())}_{chat_id}"
    db_execute("""
    INSERT INTO orders (chat_id, gift_id, status, amount, invoice_id, created_at, updated_at)
    VALUES (?, ?, ?, ?, ?, ?, ?)
    """, (chat_id, gift_id, "pending", amount, invoice_id, created, created))
    row = db_execute("SELECT id FROM orders WHERE invoice_id = ?", (invoice_id,), fetch=True)
    return row[0][0], invoice_id

def set_order_status(order_id: int, status: str):
    db_execute("UPDATE orders SET status = ?, updated_at = ? WHERE id = ?",
               (status, datetime.utcnow(), order_id))

def get_pending_orders(older_than_seconds=5):
    cutoff = datetime.utcnow() - timedelta(seconds=older_than_seconds)
    rows = db_execute("SELECT id, chat_id, gift_id, amount, invoice_id, created_at FROM orders WHERE status = 'pending'", fetch=True)
    # convert created_at string to datetime (sqlite stores as str) - but for simplicity we will just return all pending
    return rows

def get_gift(gift_id):
    rows = db_execute("SELECT id, name, price, description FROM gifts WHERE id = ?", (gift_id,), fetch=True)
    return rows[0] if rows else None

# ========== CloudPayments check (optional) ==========
def check_cloudpayments_invoice(invoice_id: str):
    """
    –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ CloudPayments v2 payments/find:
    POST https://api.cloudpayments.ru/v2/payments/find
    body: { "InvoiceId": "<invoice>" }
    header: api-key: <APP_KEY>
    –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é CloudPayments. (–≤ —ç—Ç–æ–º –∫–æ–¥–µ –º—ã —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å 'Completed' –æ–∑–Ω–∞—á–∞–µ—Ç –æ–ø–ª–∞—Ç—É).
    """
    if not CLOUDPAYMENTS_API_KEY:
        return None
    url = "https://api.cloudpayments.ru/v2/payments/find"
    try:
        resp = requests.post(url, json={"InvoiceId": invoice_id}, headers={"api-key": CLOUDPAYMENTS_API_KEY}, timeout=10)
        if resp.status_code != 200:
            log.warning("CloudPayments find returned %s %s", resp.status_code, resp.text[:200])
            return None
        data = resp.json()
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ - –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å:
        model = data.get("Model") or {}
        status = model.get("Status") or model.get("status") or None
        return {"raw": data, "status": status}
    except Exception as e:
        log.exception("CloudPayments check failed: %s", e)
        return None

# ========== –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞ ==========
async def deliver_order(order_id: int):
    row = db_execute("SELECT chat_id, gift_id, amount, invoice_id FROM orders WHERE id = ?", (order_id,), fetch=True)
    if not row:
        return
    chat_id, gift_id, amount, invoice_id = row[0]
    gift = get_gift(gift_id)
    if not gift:
        await bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ø–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        set_order_status(order_id, "error")
        return
    name = gift[1]
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å "–ø–æ–¥–∞—Ä–∫–æ–º"
    await bot.send_message(chat_id, f"üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–æ—Ç –≤–∞—à –ø–æ–¥–∞—Ä–æ–∫: *{name}*.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
                           parse_mode="Markdown")
    set_order_status(order_id, "delivered")
    log.info("Order %s delivered to %s", order_id, chat_id)

# ========== Background watcher: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç pending orders –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É ==========
async def order_watcher():
    log.info("Watcher started. TEST_MODE=%s", TEST_MODE)
    while True:
        pending = get_pending_orders()
        for ord_row in pending:
            order_id, chat_id, gift_id, amount, invoice_id, created_at = ord_row
            # –ï—Å–ª–∏ TEST_MODE ‚Äî —Å–∏–º—É–ª–∏—Ä—É–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
            if TEST_MODE:
                # –±–µ—Ä–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ >8 —Å–µ–∫ ‚Äî —Å—á–∏—Ç–∞–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º
                # (–≤ sqlite created_at –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º string; –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –µ—Å–ª–∏ older 8s by invoice_id timestamp)
                # –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º: –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –≤—Å–µ —Å—Ç–∞—Ä–µ–µ 8 —Å–µ–∫
                # (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞)
                await asyncio.sleep(0.1)  # —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å loop
                # compute naive: deliver after 8 seconds since invoice_id timestamp embedded
                try:
                    ts = int(invoice_id.split("_")[1])
                except Exception:
                    ts = int(time.time())
                if time.time() - ts > 8:
                    log.info("Simulate payment complete for order %s", order_id)
                    await deliver_order(order_id)
            else:
                # check CloudPayments status
                info = check_cloudpayments_invoice(invoice_id)
                if info and info.get("status"):
                    status = str(info["status"]).lower()
                    log.info("CloudPayments status for %s = %s", invoice_id, status)
                    # adjust this logic per CloudPayments real statuses (Completed / Authorized / Declined)
                    if status in ("completed", "success", "completedwithfraud"):  # example
                        await deliver_order(order_id)
                    elif status in ("declined", "failed"):
                        set_order_status(order_id, "failed")
                        await bot.send_message(chat_id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        await asyncio.sleep(4)

# ========== Telegram handlers ==========
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    save_user(message)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫", "üíº –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
    if is_admin(message.from_user.id):
        keyboard.add("üõ†Ô∏è –ê–¥–º–∏–Ω")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ–¥–∞—Ä–∫–æ–≤. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.message_handler(lambda m: m.text == "üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫" or m.text == "/buy")
async def cmd_buy(message: types.Message):
    rows = db_execute("SELECT id, name, price FROM gifts", fetch=True)
    if not rows:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤.")
        return
    kb = types.InlineKeyboardMarkup()
    for r in rows:
        gid, name, price = r
        kb.add(types.InlineKeyboardButton(text=f"{name} ‚Äî {price}‚ÇΩ", callback_data=f"buy:{gid}"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("buy:"))
async def on_buy(callback: types.CallbackQuery):
    chat_id = callback.from_user.id
    gid = int(callback.data.split(":")[1])
    gift = get_gift(gid)
    if not gift:
        await bot.answer_callback_query(callback.id, "–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    price = gift[2]
    order_id, invoice_id = create_order(chat_id, gid, price)
    # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É ‚Äî –≤ TEST_MODE —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞; –≤ –ø—Ä–æ–¥–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (CloudPayments/–ÆKassa) –∏ –ø–æ–ª–æ–∂–∏—Ç—å —Å—é–¥–∞
    if TEST_MODE:
        pay_link = f"https://example.com/pay?invoice={invoice_id}"  # –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
        await bot.send_message(chat_id,
            f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ #{order_id} –Ω–∞ —Å—É–º–º—É {price}‚ÇΩ.\n\n"
            f"–û–ø–ª–∞—Ç–∞ (–¥–µ–º–æ): –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É (—Å–∏–º—É–ª—è—Ü–∏—è):\n{pay_link}\n\n"
            "–û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    else:
        # –ó–¥–µ—Å—å: –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞—ë—Ç –ø–ª–∞—Ç–µ–∂/—Å–µ—Å—Å–∏—é —É CloudPayments –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É.
        # –ü—Ä–∏–º–µ—Ä: create_cloudpayments_payment_link(invoice_id, amount)
        await bot.send_message(chat_id, "–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–ø–ª–∞—Ç—É (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è CloudPayments ‚Äî –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö).")
    await bot.answer_callback_query(callback.id, f"–ó–∞–∫–∞–∑ {order_id} —Å–æ–∑–¥–∞–Ω. –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç.")

@dp.message_handler(lambda m: m.text == "üíº –ú–æ–∏ –∑–∞–∫–∞–∑—ã" or m.text == "/orders")
async def my_orders(message: types.Message):
    rows = db_execute("SELECT id, gift_id, amount, status, created_at FROM orders WHERE chat_id = ? ORDER BY id DESC", (message.from_user.id,), fetch=True)
    if not rows:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    out = []
    for r in rows:
        oid, gift_id, amount, status, created_at = r
        gift = get_gift(gift_id)
        name = gift[1] if gift else "‚Äî"
        out.append(f"#{oid} {name} ‚Äî {amount}‚ÇΩ ‚Äî {status}")
    await message.answer("\n".join(out))

# ========== Admin handlers ==========
@dp.message_handler(commands=["addgift"])
async def cmd_addgift(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    # —Ñ–æ—Ä–º–∞—Ç: /addgift –ù–∞–∑–≤–∞–Ω–∏–µ|—Ü–µ–Ω–∞|–æ–ø–∏—Å–∞–Ω–∏–µ
    parts = message.get_args()
    if not parts:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addgift –ù–∞–∑–≤–∞–Ω–∏–µ|—Ü–µ–Ω–∞|–æ–ø–∏—Å–∞–Ω–∏–µ")
        return
    try:
        name, price, desc = [p.strip() for p in parts.split("|", 2)]
        price = int(price)
    except Exception:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /addgift NFT –ö–æ—Ç–∏–∫|500|–ú–∏–ª—ã–π –∫–æ—Ç–∏–∫")
        return
    db_execute("INSERT INTO gifts (name, price, description, created_at) VALUES (?, ?, ?, ?)", (name, price, desc, datetime.utcnow()))
    await message.reply("–ü–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω.")

@dp.message_handler(commands=["listorders"])
async def cmd_listorders(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    rows = db_execute("SELECT id, chat_id, gift_id, amount, status, invoice_id FROM orders ORDER BY id DESC LIMIT 50", fetch=True)
    if not rows:
        await message.reply("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    out = []
    for r in rows:
        oid, chat_id, gift_id, amount, status, invoice_id = r
        gift = get_gift(gift_id)
        name = gift[1] if gift else "‚Äî"
        out.append(f"#{oid} {name} ({amount}‚ÇΩ) ‚Äî {status} ‚Äî user:{chat_id} ‚Äî invoice:{invoice_id}")
    await message.reply("\n".join(out))

@dp.message_handler(commands=["broadcast"])
async def cmd_broadcast(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    text = message.get_args()
    if not text:
        await message.reply("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: /broadcast –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
        return
    rows = db_execute("SELECT chat_id FROM users", fetch=True)
    sent = 0
    for r in rows:
        try:
            await bot.send_message(r[0], f"üì¢ {text}")
            sent += 1
            await asyncio.sleep(0.05)
        except Exception as e:
            log.warning("Broadcast failed to %s: %s", r[0], e)
    await message.reply(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} —Å–æ–æ–±—â–µ–Ω–∏–π.")

# ========== Startup: db –∏ watcher ==========
async def on_startup(_):
    init_db()
    ensure_sample_gifts()
    asyncio.create_task(order_watcher())
    log.info("Bot started")

# ========== Run ==========
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)