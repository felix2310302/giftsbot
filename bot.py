"""
GiftsFelix Telegram bot ‚Äî YooKassa flow + manual manager confirmation
- aiogram polling
- sqlite storage (users, gifts, orders)
- creates YooKassa payment (redirect confirmation)
- user uploads screenshot -> forwarded to manager (if MANAGER_CHAT_ID set)
- manager confirms via inline button or /confirm <order_id>
- minimal env setup in Railway
"""

import os
import sqlite3
import time
import uuid
import logging
import asyncio
import requests
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

# ======= ENV / config =======
API_TOKEN = os.getenv("API_TOKEN")  # Telegram bot token (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")  # shopId –∏–∑ –∫–∞–±–∏–Ω–µ—Ç–∞ –ÆKassa
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")  # secret key –∏–∑ –∫–∞–±–∏–Ω–µ—Ç–∞ –ÆKassa
RETURN_URL = os.getenv("RETURN_URL", "")  # –∫—É–¥–∞ –≤–µ—Ä–Ω—ë—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: https://t.me/YourBotUsername)
ADMINS = os.getenv("ADMINS", "")  # —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: "1234567,7654321"
MANAGER_CHAT_ID = os.getenv("MANAGER_CHAT_ID")  # numeric chat_id –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) ‚Äî –±–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Ç—É–¥–∞ —Å–∫—Ä–∏–Ω—ã
MANAGER_USERNAME = os.getenv("MANAGER_USERNAME", "")  # @username –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ MANAGER_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω)
TEST_MODE = os.getenv("TEST_MODE", "true").lower() in ("1", "true", "yes")
DB_PATH = os.getenv("DB_PATH", "giftsfelix.db")

ADMINS = [int(x) for x in ADMINS.split(",") if x.strip().isdigit()]
if not API_TOKEN:
    raise RuntimeError("API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# ======= DB helpers =======
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.executescript("""
    CREATE TABLE IF NOT EXISTS users (
        chat_id INTEGER PRIMARY KEY,
        first_name TEXT,
        last_name TEXT,
        username TEXT,
        created_at TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS gifts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        price INTEGER,
        description TEXT,
        created_at TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER,
        gift_id INTEGER,
        status TEXT,
        amount INTEGER,
        local_invoice TEXT,
        payment_id TEXT,
        created_at TIMESTAMP,
        updated_at TIMESTAMP
    );
    """)
    conn.commit()
    conn.close()

def db_query(sql, params=(), fetch=False):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(sql, params)
    if fetch:
        rows = cur.fetchall()
        conn.commit()
        conn.close()
        return rows
    conn.commit()
    conn.close()
    return None

def save_user(message: types.Message):
    db_query("""
    INSERT OR REPLACE INTO users (chat_id, first_name, last_name, username, created_at)
    VALUES (?, ?, ?, ?, ?)
    """, (message.from_user.id, message.from_user.first_name or "", message.from_user.last_name or "",
          message.from_user.username or "", datetime.utcnow()))

# ======= sample gifts (–µ—Å–ª–∏ –ø—É—Å—Ç–æ) =======
def ensure_sample_gifts():
    rows = db_query("SELECT id FROM gifts LIMIT 1", fetch=True)
    if not rows:
        db_query("INSERT INTO gifts (name, price, description, created_at) VALUES (?, ?, ?, ?)",
                 ("NFT –ö–æ—Ç–∏–∫", 500, "–ú–∏–ª—ã–π NFT –∫–æ—Ç–∏–∫ ‚Äî —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫", datetime.utcnow()))
        db_query("INSERT INTO gifts (name, price, description, created_at) VALUES (?, ?, ?, ?)",
                 ("NFT –ú–∞—à–∏–Ω–∞", 1200, "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω–∞—è –º–∞—à–∏–Ω–∞", datetime.utcnow()))
        log.info("–î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏")

# ======= YooKassa integration (simple requests) =======
YOOKASSA_API_BASE = "https://api.yookassa.ru/v3"

def create_yookassa_payment(local_invoice_id: str, amount_rub: int, description: str):
    """
    –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç–µ–∂ –≤ YooKassa –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º (payment_id, confirmation_url) –∏–ª–∏ (None, None) –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    –¢—Ä–µ–±—É–µ—Ç YOOKASSA_SHOP_ID –∏ YOOKASSA_SECRET_KEY –≤ env.
    """
    if not (YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY):
        return None, None, "YOOKASSA not configured"

    url = f"{YOOKASSA_API_BASE}/payments"
    headers = {
        "Idempotence-Key": local_invoice_id,
        "Content-Type": "application/json"
    }
    body = {
        "amount": {"value": f"{amount_rub:.2f}", "currency": "RUB"},
        "payment_method_data": {"type": "bank_card"},
        "confirmation": {"type": "redirect", "return_url": RETURN_URL or "https://t.me/"},  # –ª—É—á—à–µ —É–∫–∞–∑–∞—Ç—å RETURN_URL
        "description": description
    }
    try:
        resp = requests.post(url, json=body, headers=headers, auth=(YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY), timeout=10)
        if resp.status_code not in (200, 201):
            log.warning("YooKassa create payment failed: %s %s", resp.status_code, resp.text[:500])
            return None, None, f"YooKassa error {resp.status_code}"
        data = resp.json()
        payment_id = data.get("id")
        confirmation = data.get("confirmation", {})
        confirmation_url = confirmation.get("confirmation_url")
        return payment_id, confirmation_url, None
    except Exception as e:
        log.exception("create_yookassa_payment failed")
        return None, None, str(e)

def get_yookassa_payment(payment_id: str):
    """GET /payments/{payment_id}"""
    if not (YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY):
        return None
    url = f"{YOOKASSA_API_BASE}/payments/{payment_id}"
    try:
        resp = requests.get(url, auth=(YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY), timeout=10)
        if resp.status_code != 200:
            log.warning("YooKassa get payment %s -> %s", payment_id, resp.status_code)
            return None
        return resp.json()
    except Exception as e:
        log.exception("get_yookassa_payment failed")
        return None

# ======= Orders helpers =======
def create_order(chat_id: int, gift_id: int, amount: int):
    local_invoice = f"inv_{int(time.time())}_{uuid.uuid4().hex[:8]}"
    now = datetime.utcnow()
    db_query("INSERT INTO orders (chat_id, gift_id, status, amount, local_invoice, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?)",
             (chat_id, gift_id, "pending", amount, local_invoice, now, now))
    row = db_query("SELECT id FROM orders WHERE local_invoice = ?", (local_invoice,), fetch=True)
    return row[0][0], local_invoice

def set_order_payment(order_id: int, payment_id: str):
    db_query("UPDATE orders SET payment_id = ?, status = ?, updated_at = ? WHERE id = ?",
             (payment_id, "payment_created", datetime.utcnow(), order_id))

def set_order_status(order_id: int, status: str):
    db_query("UPDATE orders SET status = ?, updated_at = ? WHERE id = ?",
             (status, datetime.utcnow(), order_id))

def get_order(order_id: int):
    rows = db_query("SELECT id, chat_id, gift_id, status, amount, local_invoice, payment_id FROM orders WHERE id = ?", (order_id,), fetch=True)
    return rows[0] if rows else None

def get_pending_orders():
    return db_query("SELECT id, payment_id, local_invoice FROM orders WHERE status IN ('payment_created','pending')", fetch=True)

# ======= Delivery =======
async def deliver_order(order_id: int):
    o = get_order(order_id)
    if not o:
        return
    _, chat_id, gift_id, status, amount, local_invoice, payment_id = o
    gift = db_query("SELECT name, description FROM gifts WHERE id = ?", (gift_id,), fetch=True)
    name = gift[0][0] if gift else "–ü–æ–¥–∞—Ä–æ–∫"
    description = gift[0][1] if gift else ""
    await bot.send_message(chat_id, f"üéÅ –í–∞—à –ø–æ–¥–∞—Ä–æ–∫ *{name}* –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n{description}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
                           parse_mode="Markdown")
    set_order_status(order_id, "delivered")
    log.info("Order %s delivered", order_id)

# ======= FSM for screenshot upload =======
class UploadStates(StatesGroup):
    waiting_for_screenshot = State()

# ======= Handlers =======
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    save_user(message)
    args = message.get_args()
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫", "üíº –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
    kb.add("üìú –ü–æ–º–æ—â—å", "‚≠ê –ü–æ–¥–µ–ª–∏—Ç—å—Å—è")
    if message.from_user.id in ADMINS:
        kb.add("üõ†Ô∏è –ê–¥–º–∏–Ω")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø GiftsFelix ‚Äî –º–∞–≥–∞–∑–∏–Ω NFT-–ø–æ–¥–∞—Ä–∫–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    if args:
        # optional: deep link handling t.me/YourBot?start=gift_{id}
        if args.startswith("gift_"):
            try:
                gid = int(args.split("_",1)[1])
                rows = db_query("SELECT id, name, price, description FROM gifts WHERE id = ?", (gid,), fetch=True)
                if rows:
                    r = rows[0]
                    await message.answer(f"–ü–æ–¥–∞—Ä–æ–∫: {r[1]} ‚Äî {r[2]}‚ÇΩ\n{r[3]}")
            except Exception:
                pass

@dp.message_handler(lambda m: m.text == "üìú –ü–æ–º–æ—â—å" or m.text == "/help")
async def cmd_help(message: types.Message):
    text = (
        "üìú *–ö–æ–º–∞–Ω–¥—ã –∏ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å*\n\n"
        "–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏:\n"
        "üõí ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∏ –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫\n"
        "üíº ‚Äî –º–æ–∏ –∑–∞–∫–∞–∑—ã\n"
        "‚≠ê ‚Äî –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º —Å –¥—Ä—É–≥–æ–º\n\n"
        "–ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî –Ω–∞–∂–º–∏—Ç–µ *'–Ø –æ–ø–ª–∞—Ç–∏–ª'* –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n\n"
        "–ú–µ–Ω–µ–¥–∂–µ—Ä/–ê–¥–º–∏–Ω:\n"
        "/addgift –ù–∞–∑–≤–∞–Ω–∏–µ|—Ü–µ–Ω–∞|–æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫\n"
        "/listorders ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã\n"
        "/confirm <order_id> ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –≤—ã—Å–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫\n"
        "/decline <order_id> ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n"
        "/broadcast –¢–µ–∫—Å—Ç ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n    "
    )
    await message.answer(text, parse_mode="Markdown")

@dp.message_handler(lambda m: m.text == "üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫" or m.text == "/buy")
async def cmd_buy(message: types.Message):
    save_user(message)
    rows = db_query("SELECT id, name, price FROM gifts", fetch=True)
    if not rows:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤.")
        return
    kb = types.InlineKeyboardMarkup()
    for r in rows:
        gid, name, price = r
        kb.add(types.InlineKeyboardButton(text=f"{name} ‚Äî {price}‚ÇΩ", callback_data=f"buy:{gid}"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("buy:"))
async def on_buy(callback_q: types.CallbackQuery):
    chat_id = callback_q.from_user.id
    gid = int(callback_q.data.split(":")[1])
    gift = db_query("SELECT id, name, price, description FROM gifts WHERE id = ?", (gid,), fetch=True)
    if not gift:
        await bot.answer_callback_query(callback_q.id, "–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    gift = gift[0]
    price = gift[2]
    order_id, local_invoice = create_order(chat_id, gid, price)
    # create YooKassa payment
    payment_id, confirmation_url, err = create_yookassa_payment(local_invoice, price, f"Order #{order_id} - {gift[1]}")
    if err:
        # fallback to demo link if YooKassa not configured
        demo_link = f"https://example.com/pay?invoice={local_invoice}"
        set_order_payment(order_id, payment_id or "")
        await bot.send_message(chat_id,
            f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ #{order_id} –Ω–∞ —Å—É–º–º—É {price}‚ÇΩ.\n\n–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã (–¥–µ–º–æ):\n{demo_link}\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–Ø –æ–ø–ª–∞—Ç–∏–ª* –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("–Ø –æ–ø–ª–∞—Ç–∏–ª ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω", callback_data=f"paid:{order_id}")
            ), parse_mode="Markdown"
        )
        await bot.answer_callback_query(callback_q.id, "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω (–¥–µ–º–æ). –°—Å—ã–ª–∫–∞ –≤ —á–∞—Ç–µ.")
        return

    # save payment_id and status
    set_order_payment(order_id, payment_id)
    # send payment link and button to upload screeenshot after paying
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å (–ÆKassa)", url=confirmation_url))
    kb.add(types.InlineKeyboardButton("–Ø –æ–ø–ª–∞—Ç–∏–ª ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É", callback_data=f"paid:{order_id}"))
    await bot.send_message(chat_id,
        f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ #{order_id} –Ω–∞ —Å—É–º–º—É {price}‚ÇΩ.\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –ÆKassa. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω.",
        reply_markup=kb
    )
    await bot.answer_callback_query(callback_q.id, "–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç.")

# user presses "–Ø –æ–ø–ª–∞—Ç–∏–ª" ‚Äî we ask to upload screenshot
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("paid:"))
async def on_paid_button(callback_q: types.CallbackQuery):
    order_id = int(callback_q.data.split(":")[1])
    await bot.send_message(callback_q.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã (—Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª). –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    await UploadStates.waiting_for_screenshot.set()
    # store order_id in user state
    state = dp.current_state(user=callback_q.from_user.id)
    await state.update_data(order_id=order_id)
    await bot.answer_callback_query(callback_q.id)

# receive screenshot and forward to manager (if manager chat set) or instruct user to send manually
@dp.message_handler(content_types=types.ContentTypes.ANY, state=UploadStates.waiting_for_screenshot)
async def receive_screenshot(message: types.Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("order_id")
    await state.finish()
    # forward to manager if MANAGER_CHAT_ID set
    if MANAGER_CHAT_ID and str(MANAGER_CHAT_ID).strip().isdigit():
        try:
            manager_id = int(MANAGER_CHAT_ID)
            # forward whole message
            await bot.forward_message(manager_id, message.chat.id, message.message_id)
            # send context to manager with inline confirm/decline buttons
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –≤—ã—Å–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫", callback_data=f"admin_confirm:{order_id}"))
            kb.add(types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_decline:{order_id}"))
            order = get_order(order_id)
            if order:
                await bot.send_message(manager_id, f"–ó–∞—è–≤–∫–∞ #{order_id} ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {order[1]} –æ–ø–ª–∞—Ç–∏–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫—Ä–∏–Ω –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ.", reply_markup=kb)
            await message.answer("–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        except Exception as e:
            log.exception("forward to manager failed")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤—Ä—É—á–Ω—É—é.")
    else:
        # manager not configured: instruct user to send to manager username
        if MANAGER_USERNAME:
            await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É: @{MANAGER_USERNAME}. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏—à–ª—ë—Ç –ø–æ–¥–∞—Ä–æ–∫.")
        else:
            await message.answer("–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –±–æ—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤—Ä—É—á–Ω—É—é –∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω (–∫–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞).")

# manager inline confirm/decline
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("admin_confirm:"))
async def admin_confirm_cb(callback_q: types.CallbackQuery):
    order_id = int(callback_q.data.split(":")[1])
    user = callback_q.from_user
    # allow only manager or admins
    allowed = False
    if MANAGER_CHAT_ID and str(MANAGER_CHAT_ID).isdigit() and user.id == int(MANAGER_CHAT_ID):
        allowed = True
    if user.id in ADMINS:
        allowed = True
    if not allowed:
        await bot.answer_callback_query(callback_q.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    set_order_status(order_id, "confirmed")
    await deliver_order(order_id)
    await bot.answer_callback_query(callback_q.id, f"–ó–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("admin_decline:"))
async def admin_decline_cb(callback_q: types.CallbackQuery):
    order_id = int(callback_q.data.split(":")[1])
    user = callback_q.from_user
    if MANAGER_CHAT_ID and str(MANAGER_CHAT_ID).isdigit() and user.id == int(MANAGER_CHAT_ID):
        allowed = True
    else:
        allowed = user.id in ADMINS
    if not allowed:
        await bot.answer_callback_query(callback_q.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    set_order_status(order_id, "declined")
    await bot.answer_callback_query(callback_q.id, f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

# admin commands: confirm/decline manually and addgift/listorders/broadcast
@dp.message_handler(commands=["confirm"])
async def cmd_confirm(message: types.Message):
    if message.from_user.id not in ADMINS and not (MANAGER_CHAT_ID and str(MANAGER_CHAT_ID).isdigit() and message.from_user.id == int(MANAGER_CHAT_ID)):
        return
    args = message.get_args()
    if not args or not args.isdigit():
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /confirm <order_id>")
        return
    order_id = int(args)
    set_order_status(order_id, "confirmed")
    await deliver_order(order_id)
    await message.reply(f"–ó–∞–∫–∞–∑ {order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω.")

@dp.message_handler(commands=["decline"])
async def cmd_decline(message: types.Message):
    if message.from_user.id not in ADMINS and not (MANAGER_CHAT_ID and str(MANAGER_CHAT_ID).isdigit() and message.from_user.id == int(MANAGER_CHAT_ID)):
        return
    args = message.get_args()
    if not args or not args.isdigit():
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /decline <order_id>")
        return
    order_id = int(args)
    set_order_status(order_id, "declined")
    await message.reply(f"–ó–∞–∫–∞–∑ {order_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

@dp.message_handler(commands=["addgift"])
async def cmd_addgift(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    # format: /addgift –ù–∞–∑–≤–∞–Ω–∏–µ|—Ü–µ–Ω–∞|–æ–ø–∏—Å–∞–Ω–∏–µ
    args = message.get_args()
    if not args or "|" not in args:
        await message.reply("–§–æ—Ä–º–∞—Ç: /addgift –ù–∞–∑–≤–∞–Ω–∏–µ|—Ü–µ–Ω–∞|–æ–ø–∏—Å–∞–Ω–∏–µ")
        return
    name, price, descr = [p.strip() for p in args.split("|", 2)]
    try:
        price_i = int(price)
    except:
        await message.reply("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    db_query("INSERT INTO gifts (name, price, description, created_at) VALUES (?, ?, ?, ?)",
             (name, price_i, descr, datetime.utcnow()))
    await message.reply("–ü–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω.")

@dp.message_handler(commands=["listorders"])
async def cmd_listorders(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    rows = db_query("SELECT id, chat_id, gift_id, amount, status FROM orders ORDER BY id DESC LIMIT 50", fetch=True)
    if not rows:
        await message.reply("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    lines = []
    for r in rows:
        oid, chat_id, gift_id, amount, status = r
        g = db_query("SELECT name FROM gifts WHERE id = ?", (gift_id,), fetch=True)
        gname = g[0][0] if g else "‚Äî"
        lines.append(f"#{oid} {gname} {amount}‚ÇΩ ‚Äî {status} ‚Äî user:{chat_id}")
    await message.reply("\n".join(lines))

@dp.message_handler(commands=["broadcast"])
async def cmd_broadcast(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    text = message.get_args()
    if not text:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast –¢–µ–∫—Å—Ç")
        return
    users = db_query("SELECT chat_id FROM users", fetch=True)
    sent = 0
    for u in users:
        try:
            await bot.send_message(u[0], text)
            sent += 1
            await asyncio.sleep(0.03)
        except Exception as e:
            log.warning("Broadcast failed to %s: %s", u[0], e)
    await message.reply(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} —Å–æ–æ–±—â–µ–Ω–∏–π.")

# share and promo to attract users
@dp.message_handler(lambda m: m.text == "‚≠ê –ü–æ–¥–µ–ª–∏—Ç—å—Å—è" or m.text == "/share")
async def cmd_share(message: types.Message):
    rows = db_query("SELECT id, name, price FROM gifts LIMIT 3", fetch=True)
    text = "–Ø –∫—É–ø–∏–ª –ø–æ–¥–∞—Ä–æ–∫ –≤ GiftsFelix! –ü–æ—Å–º–æ—Ç—Ä–∏: "
    for r in rows:
        text += f"\n{r[1]} ‚Äî {r[2]}‚ÇΩ"
    bot_username = (await bot.get_me()).username
    share_text = text + f"\n\n–ö—É–ø–∏—Ç—å: https://t.me/{bot_username}"
    await message.answer("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–æ–∂–Ω–æ —ç—Ç–∏–º —Ç–µ–∫—Å—Ç–æ–º (–ø–µ—Ä–µ—à–ª–∏ –¥—Ä—É–∑—å—è–º):")
    await message.answer(share_text)

@dp.message_handler(commands=["promo"])
async def cmd_promo(message: types.Message):
    # –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–º–æ ‚Äî –º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å —Å –±–∞–∑–æ–π —Å–∫–∏–¥–æ–∫
    await message.reply("üî• –ü—Ä–æ–º–æ: –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ª—é–±–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ ‚Äî –ø—Ä–æ–º–æ–∫–æ–¥ FRIEND –¥–∞–µ—Ç —Å–∫–∏–¥–∫—É 10% (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ). –ù–∞–ø–∏—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ.")

# user orders listing
@dp.message_handler(lambda m: m.text == "üíº –ú–æ–∏ –∑–∞–∫–∞–∑—ã" or m.text == "/orders")
async def cmd_my_orders(message: types.Message):
    rows = db_query("SELECT id, gift_id, amount, status FROM orders WHERE chat_id = ? ORDER BY id DESC", (message.from_user.id,), fetch=True)
    if not rows:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    out = []
    for r in rows:
        oid, gid, amt, status = r
        g = db_query("SELECT name FROM gifts WHERE id = ?", (gid,), fetch=True)
        gname = g[0][0] if g else "‚Äî"
        out.append(f"#{oid} {gname} ‚Äî {amt}‚ÇΩ ‚Äî {status}")
    await message.answer("\n".join(out))

# ======= Background watcher: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–µ–π –≤ YooKassa –∏ - –ø—Ä–∏ paid -> –ø—Ä–æ—Å–∏—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É —Å–∫—Ä–∏–Ω =======
async def payment_watcher():
    log.info("Payment watcher started. TEST_MODE=%s", TEST_MODE)
    while True:
        pending = get_pending_orders()
        for row in pending:
            order_id, payment_id, local_invoice = row
            if TEST_MODE:
                # –¥–ª—è —Ç–µ—Å—Ç–∞: –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ paid —á–µ—Ä–µ–∑ 12 —Å–µ–∫—É–Ω–¥
                try:
                    ts = int(local_invoice.split("_")[1])
                except:
                    ts = int(time.time())
                if time.time() - ts > 12:
                    # mark as paid -> ask user to send screenshot to manager
                    set_order_status(order_id, "paid_pending_confirmation")
                    order = get_order(order_id)
                    if order:
                        chat_id = order[1]
                        await bot.send_message(chat_id, "–û–ø–ª–∞—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ (—Ç–µ—Å—Ç). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
            else:
                # check YooKassa payment status
                if not payment_id:
                    continue
                info = get_yookassa_payment(payment_id)
                if not info:
                    continue
                paid_flag = info.get("paid", False)
                status = info.get("status", "").lower()
                if paid_flag or status in ("succeeded", "paid", "waiting_for_capture", "succeeded"):
                    # we don't auto-deliver (–ø–æ —Ç–≤–æ–µ–º—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é) ‚Äî –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É
                    set_order_status(order_id, "paid_pending_confirmation")
                    order = get_order(order_id)
                    if order:
                        chat_id = order[1]
                        await bot.send_message(chat_id, "–û–ø–ª–∞—Ç–∞ –Ω–∞ –ÆKassa –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
        await asyncio.sleep(6)

# ======= startup =======
async def on_startup(dp):
    init_db()
    ensure_sample_gifts()
    asyncio.create_task(payment_watcher())
    log.info("Bot started")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)