import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from collections import defaultdict
from aiogram.contrib.fsm_storage.memory 
import MemoryStorage

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (Railway Variables)
API_TOKEN = os.getenv("API_TOKEN")

if not API_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω API_TOKEN. –£—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ –≤ Railway Variables!")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# ==========================
# –î–ê–ù–ù–´–ï (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏)
# ==========================
GIFTS = {
    1: {"name": "NFT –ö–æ—Ç–∏–∫", "price": 500},
    2: {"name": "NFT –ú–∞—à–∏–Ω–∞", "price": 1200},
    3: {"name": "NFT –ü–µ–π–∑–∞–∂", "price": 800},
}

user_ratings = defaultdict(lambda: 5.0)  # —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
user_history = defaultdict(list)  # –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫/–ø—Ä–æ–¥–∞–∂
sales_queue = {}  # –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏

# ==========================
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# ==========================
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫"), KeyboardButton("üí∞ –ü—Ä–æ–¥–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫"))
main_kb.add(KeyboardButton("üìú –ö–æ–º–∞–Ω–¥—ã"), KeyboardButton("‚≠ê –†–µ–π—Ç–∏–Ω–≥"))

cancel_kb = ReplyKeyboardMarkup(resize_keyboard=True)
cancel_kb.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))

# ==========================
# –°–¢–ê–†–¢
# ==========================
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üéÅ –Ø –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ NFT-–ø–æ–¥–∞—Ä–∫–æ–≤.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

# ==========================
# –°–ü–ò–°–û–ö –ö–û–ú–ê–ù–î
# ==========================
@dp.message_handler(lambda m: m.text == "üìú –ö–æ–º–∞–Ω–¥—ã")
async def cmd_list(message: types.Message):
    commands_text = (
        "üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/buy ‚Äî –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫\n"
        "/sell ‚Äî –ø—Ä–æ–¥–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫\n"
        "/rating ‚Äî —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤\n"
        "/history ‚Äî –∏—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )
    await message.answer(commands_text)

# ==========================
# –ö–£–ü–ò–¢–¨ –ü–û–î–ê–†–û–ö
# ==========================
@dp.message_handler(lambda m: m.text in ["üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫", "/buy"])
async def buy_gift(message: types.Message):
    text = "üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:\n\n"
    for gid, gift in GIFTS.items():
        text += f"{gid}. {gift['name']} ‚Äî {gift['price']}‚ÇΩ\n"
    text += "\n–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –ø–æ–¥–∞—Ä–∫–∞, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å."
    await message.answer(text, reply_markup=cancel_kb)
    await dp.current_state(user=message.from_user.id).set_state("choosing_gift")

@dp.message_handler(state="choosing_gift")
async def choose_gift(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ", reply_markup=main_kb)
        await dp.current_state(user=message.from_user.id).reset_state()
        return

    try:
        gift_id = int(message.text)
        if gift_id not in GIFTS:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–¥–∞—Ä–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    gift = GIFTS[gift_id]
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {gift['name']} –∑–∞ {gift['price']}‚ÇΩ.\n"
                         f"üí≥ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ...\n\n"
                         f"(–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ÆKassa/CloudPayments)", reply_markup=main_kb)

    # –ó–∞–≥–ª—É—à–∫–∞ –≤–º–µ—Å—Ç–æ –æ–ø–ª–∞—Ç—ã
    await asyncio.sleep(2)
    await message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –í–æ—Ç –≤–∞—à –ø–æ–¥–∞—Ä–æ–∫: {gift['name']} üéâ")

    user_history[message.from_user.id].append(f"–ö—É–ø–∏–ª: {gift['name']} ({gift['price']}‚ÇΩ)")

    await dp.current_state(user=message.from_user.id).reset_state()

# ==========================
# –ü–†–û–î–ê–¢–¨ –ü–û–î–ê–†–û–ö
# ==========================
@dp.message_handler(lambda m: m.text in ["üí∞ –ü—Ä–æ–¥–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫", "/sell"])
async def sell_gift(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ (—Ñ–∞–π–ª/–∫–æ–¥) –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:", reply_markup=cancel_kb)
    await dp.current_state(user=message.from_user.id).set_state("sending_gift")

@dp.message_handler(state="sending_gift", content_types=types.ContentTypes.ANY)
async def receive_gift(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ", reply_markup=main_kb)
        await dp.current_state(user=message.from_user.id).reset_state()
        return

    sales_queue[message.from_user.id] = {"gift": message.text or "–ü–æ–¥–∞—Ä–æ–∫-—Ñ–∞–π–ª", "status": "–≤ –ø—Ä–æ–¥–∞–∂–µ"}
    await message.answer("üéÅ –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ú—ã —É–≤–µ–¥–æ–º–∏–º, –∫–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–¥–∞–Ω.", reply_markup=main_kb)

    # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏
    asyncio.create_task(simulate_sale(message.from_user.id))

    await dp.current_state(user=message.from_user.id).reset_state()

async def simulate_sale(user_id):
    await asyncio.sleep(5)
    await bot.send_message(user_id, "‚úÖ –í–∞—à –ø–æ–¥–∞—Ä–æ–∫ –ø—Ä–æ–¥–∞–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:")
    await dp.current_state(user=user_id).set_state("waiting_payment_details")

@dp.message_handler(state="waiting_payment_details")
async def receive_payment_details(message: types.Message):
    details = message.text
    await message.answer(f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: {details}\n–í—ã–ø–ª–∞—á–∏–≤–∞–µ–º –¥–µ–Ω—å–≥–∏...", reply_markup=main_kb)
    user_history[message.from_user.id].append(f"–ü—Ä–æ–¥–∞–ª –ø–æ–¥–∞—Ä–æ–∫, –ø–æ–ª—É—á–∏–ª –æ–ø–ª–∞—Ç—É –Ω–∞: {details}")
    await dp.current_state(user=message.from_user.id).reset_state()

# ==========================
# –†–ï–ô–¢–ò–ù–ì
# ==========================
@dp.message_handler(lambda m: m.text in ["‚≠ê –†–µ–π—Ç–∏–Ω–≥", "/rating"])
async def rating_cmd(message: types.Message):
    text = "‚≠ê –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤:\n"
    for uid, rating in list(user_ratings.items())[:10]:
        text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}: {rating}/5\n"
    await message.answer(text)

# ==========================
# –ò–°–¢–û–†–ò–Ø –°–î–ï–õ–û–ö
# ==========================
@dp.message_handler(commands=["history"])
async def history_cmd(message: types.Message):
    history = user_history[message.from_user.id]
    if not history:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫.")
        return
    text = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫:\n" + "\n".join(history)
    await message.answer(text)

# ==========================
# HELP
# ==========================
@dp.message_handler(commands=["help"])
async def help_cmd(message: types.Message):
    await message.answer("‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å NFT-–ø–æ–¥–∞—Ä–∫–∏.\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/buy, /sell, /rating, /history")

# ==========================
# –ó–ê–ü–£–°–ö
# ==========================
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
